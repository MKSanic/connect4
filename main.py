import keyboard
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import pyautogui as pyag
import threading
import keyboard as kb
from PIL import Image, ImageDraw
import time
from random import randint

print("imports complete")
ys = []

site = 'https://connect4.gamesolver.org/'
blank = (37, 34, 51)
red = {(228, 46, 45), (145, 0, 24), (224, 41, 48), (202, 32, 43), (225, 45, 41), (236, 54, 56), (251, 54, 54),
       (243, 55, 46), (199, 30, 43), (208, 53, 59), (197, 29, 44), (169, 14, 33), (223, 41, 48), (194, 27, 42),
       (197, 30, 43), (245, 56, 47), (244, 55, 46), (230, 47, 45), (204, 33, 44), (196, 28, 43), (214, 36, 46),
       (179, 20, 37), (206, 53, 59), (239, 48, 52), (213, 38, 44), (196, 29, 43), (231, 47, 43), (226, 53, 57),
       (215, 37, 46), (218, 40, 40), (204, 33, 36), (235, 47, 51), (237, 48, 51), (217, 38, 47), (177, 18, 35),
       (209, 35, 45), (247, 51, 53), (188, 25, 34), (230, 44, 49), (189, 24, 33), (188, 24, 39), (166, 13, 29),
       (223, 43, 41), (239, 52, 46), (193, 28, 41), (250, 53, 54), (163, 10, 30), (234, 49, 44), (234, 50, 44),
       (223, 44, 44), (216, 37, 47), (199, 31, 42), (164, 12, 28), (200, 30, 42), (220, 41, 40), (225, 42, 49),
       (246, 52, 53), (235, 49, 46), (206, 33, 44), (237, 47, 51), (247, 57, 47), (177, 17, 35), (172, 15, 33),
       (231, 44, 49), (226, 46, 45), (240, 52, 46), (216, 38, 47), (211, 37, 44), (248, 52, 53), (158, 7, 28),
       (194, 27, 43), (207, 35, 43), (143, 0, 24), (167, 14, 33), (153, 7, 27), (201, 31, 44), (196, 28, 42),
       (205, 32, 44), (168, 14, 29), (231, 48, 44), (154, 5, 26), (213, 37, 46), (216, 40, 44), (161, 11, 28),
       (236, 47, 50), (152, 4, 27), (175, 17, 35), (235, 47, 50), (155, 6, 27), (177, 18, 36), (151, 4, 25),
       (221, 42, 41), (191, 26, 40), (202, 32, 37), (200, 31, 36), (234, 49, 45), (223, 44, 45), (208, 35, 44),
       (173, 15, 34), (235, 54, 56), (157, 7, 28), (170, 14, 32), (192, 26, 41), (206, 33, 45), (243, 50, 52),
       (211, 35, 46), (208, 34, 45), (170, 15, 31), (249, 53, 53), (207, 33, 45), (225, 54, 57), (240, 48, 51),
       (238, 48, 51), (221, 40, 48), (201, 31, 43), (220, 40, 48), (162, 9, 27), (224, 54, 58), (238, 52, 46),
       (195, 28, 42), (241, 49, 52), (215, 40, 44), (231, 48, 45), (146, 1, 24), (208, 36, 38), (228, 44, 49),
       (210, 36, 44), (231, 47, 45), (236, 47, 51), (152, 4, 26), (171, 17, 30), (175, 17, 34), (151, 4, 26),
       (171, 16, 33), (183, 21, 32), (209, 35, 43), (200, 30, 44), (210, 34, 45), (230, 54, 57), (195, 29, 43),
       (228, 43, 49), (245, 51, 53), (147, 1, 24), (207, 35, 37), (164, 11, 30), (173, 15, 33), (243, 54, 46),
       (235, 50, 44), (202, 32, 44), (243, 50, 53), (173, 16, 34), (220, 40, 47), (198, 29, 43), (236, 51, 46),
       (241, 53, 45), (182, 21, 38), (150, 4, 25), (230, 48, 43), (203, 32, 41), (201, 31, 42), (245, 54, 55),
       (156, 6, 28), (226, 43, 49), (227, 46, 41), (243, 54, 55), (195, 28, 43), (187, 23, 39), (242, 50, 52),
       (145, 0, 23), (187, 24, 39), (239, 54, 56), (210, 35, 45), (238, 47, 51), (149, 4, 26), (195, 28, 35),
       (186, 23, 39), (215, 39, 44), (240, 49, 52), (210, 36, 39), (206, 33, 43), (195, 29, 42), (244, 54, 55),
       (237, 51, 45), (250, 53, 53), (245, 51, 52), (163, 10, 29), (163, 12, 28), (219, 42, 44), (235, 50, 45),
       (189, 53, 62), (246, 56, 47), (227, 43, 49), (209, 36, 44), (155, 7, 26), (198, 29, 40), (207, 34, 45),
       (205, 33, 43), (244, 50, 53), (224, 44, 44), (154, 7, 26), (158, 8, 28), (153, 4, 26), (159, 9, 29),
       (231, 45, 50), (202, 31, 43), (219, 41, 41), (235, 46, 50), (197, 28, 42), (187, 24, 40), (227, 45, 42),
       (221, 42, 44), (227, 54, 57), (180, 19, 32), (222, 40, 47), (194, 28, 42), (210, 35, 46), (228, 47, 45),
       (232, 53, 56), (212, 38, 43), (251, 53, 54), (231, 54, 56), (200, 31, 43), (208, 35, 43), (177, 18, 30),
       (221, 40, 47), (145, 1, 23), (226, 45, 44), (184, 22, 37), (242, 53, 45), (229, 44, 50), (160, 9, 29),
       (246, 56, 46), (227, 43, 48), (215, 38, 47), (203, 33, 43), (178, 18, 36), (197, 29, 43), (217, 40, 40),
       (204, 32, 45), (230, 48, 45), (203, 31, 44), (236, 50, 45), (232, 45, 50), (203, 32, 43), (228, 54, 57),
       (219, 39, 47), (149, 3, 25), (198, 30, 43), (185, 22, 38), (168, 14, 33), (151, 5, 27), (233, 54, 57),
       (248, 54, 54), (212, 36, 46), (202, 31, 44), (219, 41, 40), (235, 46, 51), (170, 14, 29), (248, 53, 53),
       (147, 3, 24), (242, 54, 55), (206, 34, 37), (182, 22, 32), (183, 21, 37), (146, 1, 23), (155, 5, 27),
       (223, 43, 44), (251, 53, 53), (174, 16, 34), (250, 54, 54), (156, 7, 26), (157, 9, 27), (246, 54, 55),
       (177, 18, 31), (150, 5, 25), (216, 39, 39), (164, 53, 65), (226, 45, 45), (221, 43, 44), (247, 52, 53),
       (193, 27, 43), (218, 39, 47), (240, 54, 55), (234, 46, 51), (224, 44, 42), (222, 41, 48), (173, 16, 33),
       (169, 13, 32), (197, 29, 42), (241, 53, 46), (147, 2, 24), (236, 51, 45), (246, 51, 53), (204, 32, 44),
       (236, 50, 44), (231, 49, 45), (203, 32, 44), (249, 54, 54), (242, 54, 46), (198, 30, 42), (180, 19, 31),
       (185, 22, 39), (206, 34, 44), (192, 27, 41), (248, 53, 54), (218, 38, 47), (249, 52, 53), (155, 6, 28),
       (226, 45, 42), (215, 53, 58), (149, 4, 25), (214, 37, 46), (233, 49, 45), (229, 47, 45), (226, 42, 49),
       (181, 20, 37), (148, 2, 25), (144, 0, 24), (221, 54, 58), (211, 35, 45), (242, 49, 52), (193, 27, 42),
       (146, 0, 23), (205, 33, 44), (144, 1, 24), (234, 46, 50), (199, 30, 42), (147, 2, 25), (227, 46, 45),
       (245, 55, 46), (238, 52, 45), (252, 54, 54), (154, 6, 25), (194, 27, 41), (197, 30, 42), (245, 56, 46),
       (201, 30, 43), (247, 57, 48), (241, 49, 51), (249, 54, 55), (234, 45, 50), (205, 34, 43), (198, 30, 41),
       (242, 54, 45), (230, 47, 44), (206, 34, 43), (190, 25, 40), (151, 5, 25), (185, 23, 33), (214, 39, 44),
       (144, 0, 23), (220, 39, 47), (225, 44, 44), (145, 1, 24), (213, 38, 43), (196, 29, 42), (146, 2, 25),
       (240, 53, 46), (215, 37, 47), (172, 16, 34), (204, 33, 43), (215, 39, 40), (142, 0, 24), (206, 35, 44),
       (202, 31, 38), (174, 16, 31), (239, 52, 45), (189, 25, 33), (213, 36, 46), (153, 5, 26), (234, 50, 45),
       (226, 42, 48), (200, 30, 43), (148, 2, 24), (222, 54, 58), (225, 42, 48), (0, 0, 0), (191, 26, 34),
       (173, 15, 29), (184, 22, 38), (193, 27, 41), (149, 2, 25), (229, 44, 49), (218, 53, 58)}
yellow = {(250, 166, 13), (223, 199, 20), (244, 231, 13), (250, 170, 13), (250, 175, 13), (233, 152, 18),
          (211, 154, 12), (199, 121, 10), (202, 143, 15), (236, 154, 18), (244, 159, 15), (236, 210, 12),
          (253, 217, 13), (230, 150, 19), (240, 228, 16), (251, 249, 13), (251, 245, 13), (211, 153, 10),
          (201, 135, 13), (250, 247, 14), (205, 156, 19), (218, 187, 20), (199, 126, 11), (252, 200, 13),
          (223, 198, 20), (235, 209, 12), (253, 220, 13), (252, 205, 13), (216, 185, 21), (233, 204, 12),
          (254, 242, 13), (208, 171, 23), (215, 184, 21), (254, 254, 13), (232, 201, 12), (200, 132, 13),
          (255, 250, 13), (254, 234, 13), (242, 157, 16), (203, 150, 18), (251, 179, 13), (254, 231, 13),
          (252, 210, 13), (237, 222, 16), (202, 131, 10), (198, 122, 10), (208, 144, 11), (239, 227, 16),
          (205, 163, 21), (235, 213, 14), (207, 169, 23), (220, 175, 12), (253, 226, 13), (252, 250, 13),
          (238, 224, 17), (250, 168, 13), (233, 152, 19), (224, 181, 12), (220, 192, 21), (200, 131, 12),
          (252, 195, 13), (226, 203, 19), (229, 149, 20), (203, 146, 17), (249, 245, 14), (230, 197, 12),
          (250, 173, 13), (251, 247, 13), (213, 156, 11), (239, 226, 16), (206, 167, 22), (202, 139, 14),
          (204, 136, 11), (202, 142, 15), (255, 246, 13), (251, 171, 13), (253, 215, 13), (244, 158, 15),
          (233, 204, 13), (212, 167, 17), (253, 218, 13), (245, 238, 15), (254, 254, 12), (215, 182, 22),
          (230, 211, 18), (233, 215, 18), (254, 252, 13), (209, 172, 23), (254, 232, 13), (246, 160, 14),
          (215, 160, 11), (250, 164, 13), (238, 217, 13), (202, 144, 15), (252, 207, 13), (210, 175, 23),
          (236, 211, 13), (228, 207, 18), (192, 129, 32), (202, 141, 16), (208, 170, 23), (251, 185, 13),
          (254, 249, 13), (199, 122, 10), (212, 178, 22), (200, 131, 13), (251, 181, 13), (254, 229, 13),
          (237, 213, 12), (251, 176, 13), (253, 224, 13), (252, 209, 13), (199, 124, 10), (206, 162, 21),
          (252, 249, 13), (226, 202, 19), (250, 171, 13), (251, 194, 13), (231, 199, 12), (206, 167, 23),
          (255, 253, 13), (220, 193, 20), (203, 148, 17), (206, 169, 23), (254, 240, 13), (243, 233, 15),
          (216, 166, 13), (238, 225, 16), (243, 232, 16), (201, 128, 10), (253, 213, 13), (197, 118, 10),
          (252, 188, 13), (214, 159, 11), (232, 214, 18), (240, 156, 16), (252, 196, 13), (201, 134, 13),
          (246, 238, 15), (216, 165, 12), (200, 127, 10), (253, 216, 13), (252, 201, 13), (234, 208, 12),
          (208, 138, 27), (205, 166, 23), (254, 226, 13), (249, 161, 13), (254, 238, 13), (250, 162, 13),
          (209, 173, 23), (200, 133, 13), (251, 183, 13), (203, 151, 19), (254, 235, 13), (198, 121, 10),
          (250, 167, 13), (199, 124, 11), (247, 160, 14), (245, 232, 13), (216, 164, 11), (237, 155, 17),
          (251, 178, 13), (201, 136, 14), (203, 134, 11), (255, 255, 13), (205, 166, 24), (219, 191, 21),
          (205, 160, 20), (243, 226, 13), (250, 169, 13), (241, 223, 13), (249, 241, 13), (213, 159, 13),
          (231, 151, 19), (203, 150, 17), (254, 246, 13), (255, 242, 13), (253, 223, 13), (206, 168, 23),
          (241, 157, 16), (251, 175, 13), (253, 211, 13), (254, 243, 13), (252, 198, 13), (247, 240, 14),
          (205, 167, 23), (251, 187, 13), (199, 125, 11), (202, 130, 10), (253, 251, 13), (253, 214, 13),
          (251, 246, 13), (245, 159, 15), (227, 204, 19), (254, 236, 13), (236, 222, 17), (242, 230, 16),
          (209, 173, 22), (201, 132, 13), (242, 231, 15), (205, 165, 24), (205, 158, 20), (252, 203, 13),
          (221, 176, 11), (221, 195, 20), (208, 147, 11), (217, 187, 21), (254, 253, 13), (249, 162, 13),
          (254, 233, 13), (251, 247, 14), (250, 165, 13), (204, 157, 20), (251, 180, 13), (255, 255, 12),
          (204, 161, 22), (219, 191, 20), (228, 193, 12), (214, 161, 11), (205, 160, 21), (207, 170, 23),
          (251, 248, 14), (248, 161, 13), (252, 190, 13), (223, 199, 19), (210, 174, 22), (207, 143, 10),
          (242, 231, 16), (253, 206, 13), (255, 245, 13), (255, 249, 13), (219, 192, 21), (202, 138, 14),
          (206, 166, 22), (254, 244, 13), (199, 127, 12), (255, 252, 13), (221, 175, 12), (224, 199, 19),
          (225, 148, 21), (199, 125, 10), (253, 229, 13), (199, 122, 9), (215, 183, 22), (249, 242, 13), (204, 158, 20),
          (244, 230, 13), (252, 204, 13), (204, 150, 17), (213, 158, 12), (216, 167, 13), (221, 174, 11),
          (251, 189, 13), (200, 130, 11), (203, 132, 10), (251, 172, 13), (253, 212, 13), (252, 197, 13),
          (200, 126, 11), (201, 130, 10), (253, 252, 13), (207, 144, 11), (223, 181, 12), (250, 174, 13),
          (199, 123, 10), (248, 240, 13), (254, 239, 13), (250, 163, 13), (250, 245, 14), (210, 151, 11),
          (221, 177, 11), (248, 161, 14), (241, 229, 16), (253, 221, 13), (251, 182, 13), (242, 225, 13),
          (231, 201, 13), (217, 185, 21), (231, 212, 18), (238, 155, 17), (255, 251, 13), (252, 247, 13),
          (202, 129, 10), (250, 244, 13), (198, 123, 10), (218, 167, 11), (206, 163, 21), (222, 179, 12),
          (246, 159, 14), (253, 204, 13), (249, 161, 14), (252, 189, 13), (244, 230, 12), (255, 254, 13),
          (254, 230, 13), (217, 186, 20), (211, 153, 12), (252, 194, 13), (194, 129, 32), (243, 234, 15),
          (253, 227, 13), (238, 222, 15), (200, 126, 10), (207, 168, 22), (253, 210, 13), (249, 240, 13),
          (229, 195, 12), (207, 167, 23), (253, 230, 13), (196, 117, 10), (203, 147, 17), (253, 250, 13),
          (244, 229, 13), (250, 172, 13), (233, 217, 17), (198, 120, 10), (206, 165, 22), (252, 199, 13),
          (255, 255, 14), (251, 186, 13), (202, 140, 15), (211, 152, 12), (255, 247, 13), (244, 236, 15),
          (254, 237, 13), (250, 161, 13), (233, 205, 13), (231, 201, 12), (201, 137, 14), (215, 162, 11),
          (206, 164, 21), (246, 159, 15), (252, 186, 13), (234, 207, 12), (238, 216, 13), (253, 219, 13),
          (252, 206, 13), (216, 186, 21), (253, 202, 13), (237, 223, 16), (253, 222, 13), (220, 172, 11),
          (221, 145, 22), (250, 242, 13), (217, 186, 21), (254, 248, 13), (222, 146, 22), (222, 177, 12),
          (200, 130, 13), (255, 248, 13), (254, 228, 13), (225, 200, 19), (199, 126, 10), (252, 191, 13),
          (207, 168, 23), (253, 225, 13), (240, 220, 13), (199, 129, 13), (251, 169, 13), (254, 245, 13), (0, 0, 0),
          (251, 177, 13), (204, 135, 11), (252, 208, 13), (251, 195, 13), (249, 243, 15), (202, 140, 14),
          (200, 129, 12), (251, 188, 13), (253, 228, 13), (252, 248, 13), (252, 213, 13)}
blue = (22, 135, 239)
blue_pos = (993, 110)
pos = [
    [(700, 710), (700, 630), (700, 560), (700, 480), (700, 400), (700, 330)],
    [(780, 710), (780, 630), (780, 560), (780, 480), (780, 400), (780, 330)],
    [(850, 710), (850, 630), (850, 560), (850, 480), (850, 400), (850, 330)],
    [(930, 710), (930, 630), (930, 560), (930, 480), (930, 400), (930, 330)],
    [(1000, 710), (1000, 630), (1000, 560), (1000, 480), (1000, 400), (1000, 330)],
    [(1080, 710), (1080, 630), (1080, 560), (1080, 480), (1080, 400), (1080, 330)],
    [(1160, 710), (1160, 630), (1160, 560), (1160, 480), (1160, 400), (1160, 330)]
]

compliments = ["now I don't know what to do", "ah you got me there", "you're a god at this", "dude ur insane",
               "shet u got me there", "how r u dis gud", "you're an illuminating star", "很好",
               "great job habibi", "dang\nu got me", "thats my man", "noooo i didn't see that coming",
               "you're like the sun, on fire", "mamacita", "how", "hax", "nani", "im gonna lose", "aha", "oh noes",
               "im cornered", "brilliant!", "genius!", "what a move!"]
bl = []

coptions = Options()
coptions.headless = True
browser = webdriver.Chrome(options=coptions)
print("browser started")
'''bg = Image.open("C://Users/Hansome/PycharmProjects/plato/yellow.png")
#draw = ImageDraw.Draw(bg)
r = set()
for i in range(0,100):
    for v in range(0,100):
        r.add(bg.getpixel((i,v))[:3])
print(r)'''


def scan():
    yellows = []
    for collumn in pos:
        for v in collumn:
            p = pyag.pixel(v[0], v[1])
            if p in yellow:
                yellows.append(v)
    return yellows


def turn():
    if pyag.pixel(blue_pos[0], blue_pos[1]) == blue:
        return 0
    else:
        return 1


def bm():
    pyag.click(690, 1000)
    time.sleep(0.2)
    pyag.typewrite(
        "I will win in at most " + browser.find_element_by_xpath('//*[@id="solution_header"]').text.split(" in ")[
            1] + "\n", 0.01)
    pyag.click(740, 910)


def gm():
    while True:
        r = randint(0, len(compliments) - 1)
        comp = ''
        if r not in bl:
            comp = compliments[r]
            bl.append(comp)
            break
    pyag.click(690, 1000)
    time.sleep(0.2)
    pyag.typewrite(comp + "\n", 0.01)
    pyag.click(740, 910)


def update(where):
    i = -1
    c = 0
    final = 0
    for v, collumn in enumerate(pos):
        try:
            i = collumn.index(where)
            c = v
            break
        except:
            pass
    if i != -1:
        final = c * 6 + i
    browser.find_elements_by_xpath('//*[@id="board"]/*[@class="board"]')[final].click()
    while browser.find_element_by_xpath('//*[@id="solution_header"]').text == 'computing solution...':
        pass
    time.sleep(0.5)
    sols = browser.find_elements_by_xpath('//*[@id="solution"]/*')
    vals = []
    for v in sols:
        try:
            vals.append(int(v.text))
        except:
            vals.append(-30)
    best = max(vals)
    for i, v in enumerate(sols):
        try:
            if int(v.text) == best:
                return i
        except:
            pass


class main:
    kill = False
    comp_cd = randint(2, 4)

    def __init__(self):
        print('ready')
        self.killer()
        while not self.kill:
            self.real()

    def real(self):
        browser.get(site)
        print("site stated")
        browser.find_element_by_xpath('//*[@id="hide_solution_link"]').click()  # Clicks on show solutions
        ys = []
        bl = []
        # browser.find_element_by_xpath('//*[@id="new"]').click()
        time.sleep(2)
        pyag.click(pos[3][0])
        update(pos[3][0])
        while True:
            while turn() == 1:  # their turn, wait
                if self.kill or pyag.pixel(750, 470) == (255, 255, 255):
                    #pyag.click(690, 1000)
                    #time.sleep(0.2)
                    #pyag.typewrite("GG well played\n", 0.01)
                    #pyag.click(740, 910)
                    #time.sleep(0.2)
                    pyag.click(780, 670)
                    time.sleep(10)
                    pyag.click(680, 80)
                    time.sleep(5)
                    pyag.click(800, 1000)
                    time.sleep(1)
                    pyag.click(925, 720)
                    time.sleep(2)
                    return
            if self.comp_cd == 0:
                gm()
                self.comp_cd = randint(1, 2)
            self.comp_cd -= 1
            time.sleep(1)
            yellows = scan()  # my turn, scan
            their_move = 0
            for v in yellows:
                if v not in ys:
                    ys.append(v)
                    their_move = v
                    break
            choice = update(their_move)
            pyag.click(pos[choice][0])
            update(pos[choice][0])
            while turn() == 0:
                pass

    def killer(self):
        def main():
            while True:
                if keyboard.is_pressed('-'):
                    self.kill = True
                    return

        threading.Thread(target=main).start()


main()
